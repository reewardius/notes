kubectl create serviceaccount <service-account-name> -n <namespace>
kubectl create role secret-reader --verb=get,list,watch --resource=secrets -n <namespace>
kubectl create rolebinding <rolebinding-name> --role=secret-reader --serviceaccount=<namespace>:<service-account-name> -n <namespace>

---
apiVersion: v1
kind: Pod
metadata:
  name: <pod-name>
  namespace: <namespace>
spec:
  serviceAccountName: <service-account-name>
  containers:
  - name: <container-name>
    image: <container-image>
	
> kubectl apply -f <pod-definition-file.yaml>
> kubectl auth can-i
> kubectl auth can-i <verb> <resource> [<resource-name>] [-n <namespace>]
> kubectl auth can-i list pods -n default
It will return yes if the user has permission and no if they don't.
> kubectl auth can-i * secrets -n <namespace>



Sure, here's an example of how you can use the kubectl auth can-i command to check if a user has a certain permission on a specific resource:

Let's say you want to check if the user user1 has the permission to get the secret named mysecret in the namespace mynamespace.
You can use the following command:

> kubectl auth can-i get secret/mysecret -n mynamespace --as=user1
It will return yes if the user user1 has permission to get the secret mysecret in the namespace mynamespace, and no if they don't.

In addition, if you want to check the permissions for a service account, you can use the following command:

> kubectl auth can-i get secret/mysecret -n mynamespace --as=system:serviceaccount:mynamespace:my-sa

This will check if the service account my-sa in the namespace mynamespace has the permission to get the secret mysecret in the mynamespace namespace.

Keep in mind that this command only checks the permissions that are defined in the cluster's RBAC rules, if there are no rules defined or the resource-name is not defined in the rules, the output will always be no


