Where in Kubernetes are the secrets mounted in the deployment or in the service?

In Kubernetes, secrets are typically mounted as environment variables or files in a pod's file system. They can be added to a deployment or a service via the spec.template.spec.containers.env or spec.template.spec.volumes fields, respectively. The secrets can be accessed by the containers running in the pod.

show deployments conf and service conf

Here is an example configuration for a deployment in Kubernetes:

apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-deployment
spec:
  replicas: 3
  selector:
    matchLabels:
      app: my-app
  template:
    metadata:
      labels:
        app: my-app
    spec:
      containers:
      - name: my-container
        image: my-image
        ports:
        - containerPort: 80
        env:
        - name: SECRET_USERNAME
          valueFrom:
            secretKeyRef:
              name: my-secretc
              key: username
        - name: SECRET_PASSWORD
          valueFrom:
            secretKeyRef:
              name: my-secret
              key: password

And here is an example configuration for a service in Kubernetes:

apiVersion: v1
kind: Service
metadata:
  name: my-service
spec:
  selector:
    app: my-app
  ports:
  - name: http
    protocol: TCP
    port: 80
    targetPort: 80
  type: ClusterIP

This service configuration is exposing the pods with label app: my-app on port 80 of the cluster and it will be accessible via the ClusterIP service which is a virtual IP that only routes within the cluster.
Please note that this is a basic example and it may not match with your specific use case.

where i need to write this?

        env:
        - name: SECRET_USERNAME
          valueFrom:
            secretKeyRef:
              name: my-secret
              key: username
        - name: SECRET_PASSWORD
          valueFrom:
            secretKeyRef:
              name: my-secret
              key: password

The code snippet you provided:

  env:
  - name: SECRET_USERNAME
    valueFrom:
      secretKeyRef:
        name: my-secret
        key: username
  - name: SECRET_PASSWORD
    valueFrom:
      secretKeyRef:
        name: my-secret
        key: password

should be added under the spec.template.spec.containers field in a deployment configuration file.
It can be used to create environment variables SECRET_USERNAME and SECRET_PASSWORD in the container and setting the value for them from the Kubernetes secret my-secret and its keys username and password respectively.
So, you need to add this snippet in your Deployment configuration file under spec.template.spec.containers field and make sure you have a secret my-secret created and username and password keys are present in it.

how to create secrets with this variables?

There are multiple ways to create a secret in Kubernetes with the variables SECRET_USERNAME and SECRET_PASSWORD. Here are a few examples:

    Using kubectl create secret command:

kubectl create secret generic my-secret --from-literal=username=your_username --from-literal=password=your_password

    Using kubectl create command and a YAML file:

apiVersion: v1
kind: Secret
metadata:
  name: my-secret
type: Opaque
data:
  username: dXNlcm5hbWU=
  password: cGFzc3dvcmQ=

You can use echo -n 'username' | base64 to encode the plaintext variable values to base64 encoded values.

    Using kubectl apply command and a YAML file:

apiVersion: v1
kind: Secret
metadata:
  name: my-secret
type: Opaque
stringData:
  username: your_username
  password: your_password

Once the secret is created, you can use it in your deployment or service configuration files.
Please note that you should avoid storing sensitive information in plaintext in your configuration files and also make sure that you are following the best practices for securing secrets in Kubernetes.