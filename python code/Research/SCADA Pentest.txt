SCADA (Supervisory Control and Data Acquisition) systems are used to control and monitor industrial processes, such as those found in power plants, water treatment facilities, and manufacturing plants. SCADA pentesting, also known as SCADA security testing, is the process of evaluating the security of SCADA systems by simulating an attack on them. The goal of SCADA pentesting is to identify vulnerabilities and weaknesses in the systems, and to provide recommendations for how to remediate these issues.

There are several directions that a SCADA pentest can take, depending on the specific goals and objectives of the testing. Some common areas of focus for SCADA pentests include:

# Network security: Testing the security of the network infrastructure that the SCADA systems are connected to, including routers, switches, and other network devices.

# Device security: Evaluating the security of the individual SCADA devices, including testing for vulnerabilities in the hardware, firmware, and software.

# Application security: Testing the security of any applications that are used to manage or control the SCADA systems, including mobile apps and web-based applications.

# Data security: Evaluating the security of the data that is collected and transmitted by the SCADA systems, including testing for vulnerabilities in the data storage and transmission systems.

# Physical security: Testing the physical security of the SCADA systems, including evaluating the security of the device housing, wiring, and other physical components.

# Protocol security: Testing the security of the protocols that are used to communicate between the SCADA devices and systems, including evaluating the security of the communication channels and the protocols themselves.

SCADA (supervisory control and data acquisition) systems are used to remotely monitor and control industrial processes and infrastructure, such as power plants, water treatment facilities, and manufacturing plants. They typically include control systems, sensors, and communication networks that allow operators to monitor and control these processes from a central location.

Pentesting (penetration testing) a SCADA system involves simulating an attack on the system to identify vulnerabilities and assess the system's security. This process usually involves the following steps:

# Planning: This involves defining the scope of the pentest, identifying the systems and components that will be tested, and establishing the goals and objectives of the test.

# Information gathering: This involves collecting information about the target SCADA system and its components, such as the types of hardware and software used, the communication protocols employed, and the network infrastructure.

# Vulnerability assessment: This involves identifying vulnerabilities in the SCADA system, such as unpatched software, weak passwords, and misconfigured systems.

# Exploitation: This involves attempting to exploit the identified vulnerabilities to gain access to the system or its data.

# Reporting: This involves documenting the results of the pentest and providing recommendations for improving the system's security.

When pentesting a SCADA system, it's important to check the following points:

# Network infrastructure: This includes checking for vulnerabilities in the network itself, such as unsecured wireless access points or unencrypted communications.
# Wireless Pentest
# Nessus / Nexpose / OpenVAS / Nmap
  
  Unencrypted communications:
  
Use a packet analyzer: A packet analyzer is a tool that allows you to capture and analyze network traffic. You can use a packet analyzer to examine the packets being transmitted on your network and determine if they are encrypted or not. Some popular packet analyzers include Wireshark and tcpdump.

Use a network security scanner: A network security scanner is a tool that scans your network for vulnerabilities and security issues. Many security scanners can detect unencrypted communications and alert you to any potential issues.

Monitor network traffic: You can use tools such as NetFlow or sFlow to monitor the traffic on your network in real-time. This can help you identify any unencrypted communications that may be taking place.

Use network segmentation: Network segmentation involves dividing your network into smaller, separate segments, each with its own security controls. This can help limit the scope of unencrypted communications and make it easier to identify and mitigate any potential issues.
  
  
# Communication protocols: This includes checking for vulnerabilities in the protocols used to communicate between different components of the SCADA system, such as Modbus or DNP3.

# Modbus
Some common vulnerabilities in the Modbus protocol include:

   1. Lack of authentication: Modbus does not have any built-in authentication mechanisms, which means that anyone on the network can send commands to Modbus devices. This can allow an attacker to take control of the devices or manipulate their behavior.

   2. Lack of encryption: Modbus does not use encryption to protect the data being transmitted over the network. This means that an attacker who is able to intercept the data could potentially read or modify it.

   3. Lack of integrity protection: Modbus does not include any mechanisms to verify the integrity of the data being transmitted. This means that an attacker could potentially tamper with the data without being detected.

   4. Inadequate error handling: Modbus devices may not properly handle errors or exceptions, which can allow an attacker to cause a device to malfunction or crash.

To protect against these vulnerabilities, it is important to use secure communication protocols and to properly secure the network. In addition, it is a good idea to regularly update and patch Modbus devices to ensure that they are running the latest software and are protected against known vulnerabilities.

# DNP3

Some common vulnerabilities in the DNP3 protocol include:

   1. Lack of authentication: DNP3 does not have any built-in authentication mechanisms, which means that anyone on the network can send commands to DNP3 devices. This can allow an attacker to take control of the devices or manipulate their behavior.

   2. Lack of encryption: DNP3 does not use encryption to protect the data being transmitted over the network. This means that an attacker who is able to intercept the data could potentially read or modify it.

   [ There are several ways you can intercept DNP3 traffic:

Use a packet analyzer: A packet analyzer is a tool that allows you to capture and analyze network traffic. You can use a packet analyzer to capture DNP3 traffic and view the packets being transmitted. Some popular packet analyzers include Wireshark and tcpdump.

Use a network security scanner: Many network security scanners can capture and analyze DNP3 traffic as part of their scan process.

Use a network tap: A network tap is a device that connects to your network and allows you to capture all of the traffic passing through it. You can then use a packet analyzer to view the captured traffic, including DNP3 traffic.

It is important to note that intercepting DNP3 traffic without proper authorization is a violation of privacy and could be illegal in some jurisdictions. It is important to respect the privacy of others and to only intercept DNP3 traffic for legitimate and authorized purposes. ]


   3. Lack of integrity protection: DNP3 does not include any mechanisms to verify the integrity of the data being transmitted. This means that an attacker could potentially tamper with the data without being detected.

   4. Inadequate error handling: DNP3 devices may not properly handle errors or exceptions, which can allow an attacker to cause a device to malfunction or crash.

   5. Buffer overflows: DNP3 devices may be susceptible to buffer overflow attacks, which can allow an attacker to execute arbitrary code on the device.

To protect against these vulnerabilities, it is important to use secure communication protocols and to properly secure the network. In addition, it is a good idea to regularly update and patch DNP3 devices to ensure that they are running the latest software and are protected against known vulnerabilities.


# Control systems: This includes checking for vulnerabilities in the hardware and software used to control the industrial processes being monitored, such as PLCs (programmable logic controllers) and HMI (human-machine interface) systems.

# Sensors and devices: This includes checking for vulnerabilities in the sensors and devices used to monitor the industrial processes being controlled, such as temperature sensors and flow meters.

There are many different checklist resources available for pentesting SCADA systems. Some examples include the OWASP (Open Web Application Security Project) SCADA Security Top Ten, the NIST (National Institute of Standards and Technology) Cybersecurity Framework, and the ISA/IEC 62443 series of standards. It's important to use a thorough and comprehensive checklist to ensure that all potential vulnerabilities are identified and addressed.

https://github.com/paulveillard/cybersecurity-industrial-control-systems-security
https://github.com/CyberICS/list_ics_scanner
https://github.com/CyberICS/Suricata-Rules-for-ICS-SCADA
https://github.com/neutrinoguy/awesome-ics-writeups
https://github.com/rmusser01/Infosec_Reference/tree/master/Draft -> SCADA
https://github.com/hslatman/awesome-industrial-control-system-security
https://github.com/kh4sh3i/ICS-Pentesting-Tools
https://github.com/SCADACS/PLCinject
https://github.com/theralfbrown/smod-1
https://github.com/digitalbond/Redpoint
https://github.com/mushorg/conpot
https://github.com/securitygeneration/Honeyport
https://github.com/rmusser01/Infosec_Reference/blob/master/Draft/SCADA.md
https://www.sans.org/course/pentesting-smartgrid-scada
https://www.slideshare.net/phdays/damn-vulnerable-chemical-process
https://research.aurainfosec.io/scada-penetration-testing/


https://github.com/klsecservices/s7scan
https://github.com/dark-lbp/isf
https://github.com/threat9/routersploit
https://michmich.eu/

https://research.aurainfosec.io/scada-penetration-testing/#a-typical-scada-network
https://www.hackers-arise.com/scada-hacking
https://spearit.net/services/iot-scada-pentest


https://www.udemy.com/course/fundamentals-of-ot-cybersecurity/


Shodan Dorks and default credentials (from Germany Course)
https://github.com/AustrianEnergyCERT/ICS_IoT_Shodan_Dorks
https://www.hackers-arise.com/post/2016/07/05/scada-hacking-finding-vulnerable-scada-systems-using-google-hacking
https://www.scadaexposure.com/library/scada-googledorks-121227101926-phpapp01.pdf
http://scadasecuritybootcamp.com/SCADA-Default-Password-List.php
http://scadasecuritybootcamp.com/SCADA-Google-dorks.php
https://github.com/scadastrangelove/SCADAPASS/blob/master/scadapass.csv
https://hackmd.io/@tuBp9oxkSra7nw4TNItvUg/BkVIccr-j
https://github.com/SadFud/Exploits



Modbus and DNP3 are both industrial communication protocols that are used to enable devices to communicate with one another over a network. However, there are some key differences between the two protocols:

Purpose: Modbus is primarily used for supervisory control and data acquisition (SCADA) systems, while DNP3 is primarily used for utility automation (e.g., electricity, water, and gas).

Structure: Modbus uses a request-response structure, where a device sends a request and receives a response from the server. DNP3 uses a more complex structure that includes request and response messages, as well as unsolicited messages that can be sent by the server at any time.

Function codes: Modbus and DNP3 both use function codes to specify the type of request or response contained in a packet. However, the specific function codes used by each protocol are different.

Data types: Modbus and DNP3 support different data types and have different mechanisms for encoding and decoding data.

Security: Modbus does not have any built-in security features, while DNP3 includes support for authentication and encryption.

Overall, Modbus and DNP3 are both widely used industrial communication protocols, but they are designed for different purposes and have some key differences in their structure and functionality.



Modbus and DNP3 are both industrial communication protocols that are used to enable devices to communicate with one another over a network. However, there are some key differences between the two protocols:

Purpose: Modbus is primarily used for communicating with devices that perform simple input/output (I/O) functions, such as sensors, actuators, and other types of industrial equipment. DNP3 is primarily used for communicating with devices that perform more complex functions, such as programmable logic controllers (PLCs), relay protection systems, and energy management systems.

Structure: Modbus uses a simple, request/response structure, where a device sends a request to another device and receives a response. DNP3 uses a more complex, event-driven structure, where devices can send unsolicited messages to one another and can receive multiple responses to a single request.

Security: Modbus does not include any built-in security measures, such as authentication or encryption. DNP3 includes optional authentication and encryption features, but these are not always implemented in practice.

Protocol family: Modbus is a part of the Modbus protocol family, which includes several different protocols for different types of communication (e.g., serial, TCP/IP, etc.). DNP3 is a standalone protocol and does not belong to a larger protocol family.


DNP3 (Distributed Network Protocol 3) is a widely used protocol for communication in SCADA (Supervisory Control and Data Acquisition) systems. Encrypting traffic in DNP3 can help to protect against interception and tampering of data transmitted over the network.

There are several options for encrypting traffic in DNP3, including:

Use a secure version of DNP3: DNP3 has a secure version called DNP3 Secure Authentication (DNP3SA), which includes support for encryption and secure authentication. DNP3SA can be used to encrypt all DNP3 traffic between two devices.

Use a VPN (Virtual Private Network): A VPN can be used to encrypt all traffic between two devices, including DNP3 traffic. This can be a good option if you want to encrypt all traffic between two devices, not just DNP3 traffic.

Use a secure communication method: DNP3 can be transmitted over a variety of communication methods, including serial, Ethernet, and radio. Some of these methods may offer built-in security features, such as encryption or authentication.

It is important to note that encrypting traffic in DNP3 is just one aspect of securing a SCADA system. Other measures, such as access controls, firewalls, and secure configuration, are also important to consider.



OWASP SCADA Security Top 10

The OWASP (Open Web Application Security Project) SCADA (Supervisory Control and Data Acquisition) Security Top 10 is a list of the top 10 most critical security risks to SCADA systems. SCADA systems are used to control and monitor industrial processes, such as those found in power plants, water treatment facilities, and manufacturing plants. These systems are critical to the operation of these facilities, and any security vulnerabilities could have serious consequences.

1. Insecure Network Communications: SCADA systems often rely on communication networks to transmit data and control commands between control centers and field devices. These networks are often insecure and can be vulnerable to attack.

2.Insecure Remote Access: SCADA systems often have remote access capabilities, which can be exploited by attackers to gain unauthorized access to the system.

3.   Lack of Encryption: SCADA systems often transmit data and control commands over communication networks, and this data is often not encrypted, making it vulnerable to interception and manipulation.

4.Unsecured Field Devices: SCADA field devices, such as sensors and actuators, are often not secured and can be easily accessed and manipulated by attackers.

5.   Unsecured Human-Machine Interfaces (HMIs): The HMIs used to access and control SCADA systems are often not secured and can be easily accessed by unauthorized users.

6.  Lack of Access Control: SCADA systems often lack proper access controls, allowing unauthorized users to gain access to the system.

7.  Insufficient System and Network Monitoring: SCADA systems often lack sufficient monitoring capabilities, making it difficult to detect and respond to security breaches.

8.  Lack of Security Policies and Procedures: SCADA systems often lack defined security policies and procedures, making it difficult to ensure that the system is secure.

9.  Inadequate Security Testing: SCADA systems are often not adequately tested for security vulnerabilities, making it difficult to identify and mitigate risks.

10.  Inadequate Security Maintenance: SCADA systems often lack proper maintenance and updates, leaving them vulnerable to known security vulnerabilities.


OWASP SCADA Security Top 10 Examples

Here are more details on each of the points in the OWASP SCADA Security Top 10:

1. Insecure Network Communications: SCADA systems often rely on communication networks to transmit data and control commands between control centers and field devices. These networks are often insecure and can be vulnerable to attack. For example, SCADA networks may use outdated or unencrypted protocols such as Modbus or DNP3, which can be easily exploited by attackers.

2. Insecure Remote Access: SCADA systems often have remote access capabilities, which can be exploited by attackers to gain unauthorized access to the system. For example, an attacker may be able to gain access to the system through unsecured remote access protocols such as Telnet or SSH, or by exploiting vulnerabilities in the system's remote access software.

3. Lack of Encryption: SCADA systems often transmit data and control commands over communication networks, and this data is often not encrypted, making it vulnerable to interception and manipulation. For example, an attacker may be able to intercept and manipulate data transmitted over an unencrypted SCADA network, such as data used to control a power plant or water treatment facility.

4.  Unsecured Field Devices: SCADA field devices, such as sensors and actuators, are often not secured and can be easily accessed and manipulated by attackers. These devices may have weak passwords, or may not require any authentication at all, making it easy for an attacker to gain access to them.

5.  Unsecured Human-Machine Interfaces (HMIs): The HMIs used to access and control SCADA systems are often not secured and can be easily accessed by unauthorized users. For example, an attacker may be able to gain access to an HMI through a weak password or by exploiting vulnerabilities in the HMI software.

6.  Lack of Access Control: SCADA systems often lack proper access controls, allowing unauthorized users to gain access to the system. For example, an attacker may be able to gain access to a SCADA system by guessing or cracking passwords, or by exploiting vulnerabilities in the system's authentication mechanism.

7.  Insufficient System and Network Monitoring: SCADA systems often lack sufficient monitoring capabilities, making it difficult to detect and respond to security breaches. For example, an attacker may be able to compromise a SCADA system without being detected, allowing them to carry out their attack for an extended period of time before being discovered.

8.  Lack of Security Policies and Procedures: SCADA systems often lack defined security policies and procedures, making it difficult to ensure that the system is secure. For example, a SCADA system may not have defined policies for password management, access control, or incident response, leaving it vulnerable to attack.

9.  Inadequate Security Testing: SCADA systems are often not adequately tested for security vulnerabilities, making it difficult to identify and mitigate risks. For example, a SCADA system may not have undergone regular penetration testing or vulnerability assessments, leaving it vulnerable to known vulnerabilities.

10.  Inadequate Security Maintenance: SCADA systems often lack proper maintenance and updates, leaving them vulnerable to known security vulnerabilities. For example, a SCADA system may not be regularly patched or updated, leaving it vulnerable to known security vulnerabilities that have been identified and fixed by the manufacturer.


SCADA Checklist


1. Check for insecure network communications:

Are the communication protocols used by the SCADA system secure and up-to-date?
Are the communication networks used by the SCADA system encrypted?
Are the communication networks used by the SCADA system properly configured and secured?

2. Check for insecure remote access:

Is remote access to the SCADA system properly secured and configured?
Are strong passwords and authentication methods used to secure remote access to the SCADA system?
Are the remote access protocols used by the SCADA system secure and up-to-date?

3. Check for lack of encryption:

Is data transmitted over the SCADA system encrypted?
Are control commands transmitted over the SCADA system encrypted?
Are the encryption protocols used by the SCADA system secure and up-to-date?

4. Check for unsecured field devices:

Are the field devices used by the SCADA system properly secured and configured?
Are strong passwords and authentication methods used to secure access to field devices?
Are the field devices regularly maintained and updated to fix security vulnerabilities?

5. Check for unsecured human-machine interfaces (HMIs):

Are the HMIs used by the SCADA system properly secured and configured?
Are strong passwords and authentication methods used to secure access to the HMIs?
Are the HMIs regularly maintained and updated to fix security vulnerabilities?

6. Check for lack of access control:

Does the SCADA system have proper access controls in place to prevent unauthorized access?
Are strong passwords and authentication methods used to secure access to the SCADA system?
Are the access controls regularly tested and updated to ensure their effectiveness?

7. Check for insufficient system and network monitoring:

Does the SCADA system have sufficient monitoring capabilities to detect and respond to security breaches?
Are the monitoring systems regularly tested and maintained to ensure their effectiveness?
Is there a plan in place to respond to security breaches and incidents?

8. Check for lack of security policies and procedures:

Does the SCADA system have defined security policies and procedures in place?
Are the security policies and procedures regularly reviewed and updated to ensure their effectiveness?
Are the security policies and procedures communicated to all relevant personnel?

9. Check for inadequate security testing:

Has the SCADA system undergone regular penetration testing and vulnerability assessments?
Are the results of security testing used to identify and address vulnerabilities in the system?
Is there a plan in place to regularly test the security of the SCADA system?

10. Check for inadequate security maintenance:

Is the SCADA system regularly maintained and updated to fix known security vulnerabilities?
Are the maintenance and update processes for the SCADA system secure and effective?
Is there a plan in place to ensure that the SCADA system stays up-to-date with the latest security patches and updates?

Here is a detailed SCADA pentest checklist that can be used as a starting point for conducting a SCADA security assessment:

1. Plan and scope the assessment:

1.1 Define the scope and objectives of the assessment
1.2 Identify the specific SCADA system or systems that will be tested
1.3 Determine the testing methodology and approach
1.4 Identify any constraints or limitations on the testing
1.5 Obtain permission from the owner of the SCADA system

2. Gather information:

2.1 Research the SCADA system and its components, including:
2.2 Hardware: PLCs, RTUs, sensors, actuators, etc.
2.3 Software: Operating system, SCADA software, device drivers, etc.
2.4 Network architecture: Topology, communication protocols, data transmission methods, etc.
2.5 Security measures: Firewalls, access controls, encryption, etc.

3. Perform vulnerability assessment:

3.1 Identify vulnerabilities in the SCADA system, including:
3.2 Hardware vulnerabilities: Physical security, firmware, default passwords, etc.
3.3 Software vulnerabilities: Operating system, SCADA software, device drivers, etc.
3.4 Communication vulnerabilities: Protocols, data transmission methods, etc.

4. Conduct penetration testing:

4.1 Attempt to exploit identified vulnerabilities to gain unauthorized access to the SCADA system or its data
4.2 Test the effectiveness of security measures, such as firewalls and access controls
4.3 Test the resilience of the SCADA system to attacks, such as denial of service (DoS) attacks

5. Analyze and report findings:

5.1 Document the results of the testing, including any vulnerabilities or weaknesses that were discovered
5.2 Provide recommendations for addressing identified vulnerabilities and weaknesses
5.3 Report any compliance issues or other concerns that were identified during the assessment

It is important to note that this checklist is just a starting point and may need to be customized based on the specific SCADA system being tested and the goals of the assessment. It is also important to follow all relevant laws and regulations, as well as any industry-specific standards and guidelines.



Security audits for SCADA systems typically involve the following stages:

Planning: The planning stage involves defining the scope of the audit, identifying the objectives of the audit, and establishing the criteria and standards that will be used to evaluate the system. This stage may also involve identifying the resources and personnel that will be needed to conduct the audit.

Preparation: The preparation stage involves gathering information about the SCADA system and its environment, such as its architecture, hardware and software components, and communication protocols. This stage may also involve identifying potential risks and vulnerabilities that may be present in the system.

Assessment: The assessment stage involves evaluating the SCADA system to identify vulnerabilities and potential problems. This may involve testing the system's security controls and examining its configuration and settings. The assessment stage may also involve reviewing the system's documentation, policies, and procedures to ensure that they are adequate and effective.

Reporting: The reporting stage involves documenting the results of the audit, including any vulnerabilities or problems that were identified. The report should also include recommendations for addressing any identified issues and improving the system's security.

Remediation: The remediation stage involves implementing the recommendations from the audit report to address identified vulnerabilities and improve the system's security. This may involve updating the system's software, configuring its security controls, or implementing new policies and procedures.

Follow-up: The follow-up stage involves periodically reviewing the SCADA system to ensure that the remediation steps have been effective and that the system's security has been improved. This may involve re-assessing the system to identify any new vulnerabilities or problems that may have emerged.




SCADA (Supervisory Control and Data Acquisition) systems are used to monitor and control industrial processes, such as those in power plants, water treatment facilities, and manufacturing plants. As such, they are critical infrastructure and it is important to ensure that they are secure. One way to do this is through a SCADA pentest, which is a type of cybersecurity assessment that specifically focuses on the security of SCADA systems.

Here is a general process for conducting a SCADA pentest:

Plan and scope the assessment: Identify the specific SCADA system or systems that need to be tested, as well as any constraints or limitations on the testing.

Gather information: Conduct research on the SCADA system, including the hardware and software used, the network architecture, and the protocols and communication methods employed.

Perform vulnerability assessment: Identify vulnerabilities in the SCADA system, including those related to hardware, software, and communication protocols.

Conduct penetration testing: Attempt to exploit the identified vulnerabilities to gain unauthorized access to the SCADA system or its data.

Analyze and report findings: Document the results of the testing, including any vulnerabilities or weaknesses that were discovered, and provide recommendations for addressing them.

It is important to note that SCADA pentesting should only be conducted by qualified professionals with the necessary skills and expertise, and only with the permission of the owner of the SCADA system. It is also important to follow all relevant laws and regulations, as well as any industry-specific standards and guidelines.





DNP3 (Distributed Network Protocol 3) is a widely used protocol for communication in utility automation systems, such as those used in the electricity, water, and gas industries. In a utility automation system that uses DNP3, various devices, such as sensors, actuators, and controllers, communicate with each other using DNP3 to exchange data and control signals.

Here is an example of how DNP3 might be used in a utility automation system:

Sensors and other field devices collect data, such as temperature, pressure, and flow rate, and transmit it to a control system using DNP3.

The control system receives the data and processes it to make decisions about how to control the system. For example, it might adjust valve positions or start or stop pumps based on the data received.

The control system sends control signals to the field devices using DNP3 to execute the desired actions.

The field devices receive the control signals and execute the commands, such as opening or closing valves or starting or stopping pumps.

The field devices transmit status information back to the control system using DNP3, which is used to update the control system's status and make further control decisions.

In this way, DNP3 is used to facilitate communication and control in a utility automation system, enabling real-time monitoring and control of the system. It is important to note that DNP3 is just one aspect of a utility automation system and that other components, such as hardware, software, and communication infrastructure, are also important considerations.

Modbus is another widely used protocol for communication in industrial automation systems, including utility automation systems. While both Modbus and DNP3 are commonly used in these types of systems, there are a few reasons why one protocol might be chosen over the other:

Compatibility with existing systems: If a utility automation system is already using a particular protocol, such as DNP3, it may be more cost-effective and easier to continue using that protocol rather than switching to a new one, such as Modbus.

Functionality: DNP3 and Modbus have different capabilities and may be better suited to different applications. For example, DNP3 has more advanced security features and is better suited to systems that require secure communication, while Modbus is simpler and may be more suitable for smaller, less complex systems.

Industry standards: Different industries may have different standards or guidelines that specify the use of a particular protocol. For example, the electric power industry has standardized on DNP3 as the primary protocol for communication in substations.

Ultimately, the choice of protocol will depend on the specific requirements and needs of the utility automation system and the industry in which it is used. Both DNP3 and Modbus have their own strengths and weaknesses and can be suitable for different applications.


Shodan Dorks

Industrial control systems

There are several popular industrial control systems (ICS) in use around the world, including:

Programmable Logic Controllers (PLCs) - These are specialized computers that are used to control industrial processes, such as manufacturing and assembly lines.

Supervisory Control and Data Acquisition (SCADA) systems - These are used to monitor and control industrial processes, such as those in oil and gas, water and sewage, and electricity generation and distribution.

Distributed Control Systems (DCSs) - These are used to control complex processes, such as those in petrochemical plants and power plants.

Manufacturing Execution Systems (MES) - These are used to manage and optimize manufacturing processes, including production planning, scheduling, and quality control.

Building Management Systems (BMS) - These are used to control and monitor the mechanical, electrical, and environmental systems in buildings.

Process Control Systems (PCS) - These are used to control and monitor industrial processes, such as those in chemical and pharmaceutical plants.

Safety Instrumented Systems (SIS) - These are used to monitor and control hazardous processes, such as those in oil and gas, and ensure the safety of personnel and equipment.

Human-Machine Interfaces (HMIs) - These are used to allow operators to interact with industrial control systems, such as PLCs and SCADA systems, and monitor and control the processes they are responsible for.


Industrial control systems identified using machine learning
# screenshot.label:ics
Industrial control systems running an industrial protocol (i.e. no web servers)
# tag:ics

"ControlLogix"
"CompactLogix"
"MicroLogix"
"SLC 500"
"PLC5"
"Modicon"
"Omron"
"Mitsubishi PLC"
"SCADA"
"HMI"
"GE Intelligent Platforms"
"Schneider Electric PLC"
"Siemens S7"
"BACnet"
"Profinet"
"Modbus"
"EtherNet/IP"
"DNP3"
"OPC"
"PCWorx"

Building Operation Automation Server
Schneider Electric
moxa
eWON
Sauter
scada
3S - Smart
Honeywell
rockwell
title:'xzeres wind'
html:'PIPS Technology ALPR Processors'
port:502
port:102
port:20000 source address
port:789 product:'Red Lion Controls'
port:1962 PLC
port:5094 hart-ip
port:18245,18246 product:'general electric'
port:1911,4911 product:Niagara
port:47808
port:44818
port:9600 response code
port:5006,5007 product mitsubishi
port:2455 operating system
port:20547 PLC
port:2404 asdu address
port:161 simatic
port:3011
port:1911
mitsubishi
siemens 

In a Supervisory Control and Data Acquisition (SCADA) system, the master-slave configuration refers to the way in which devices communicate with each other.

In a master-slave configuration, one device, known as the master, is responsible for sending requests to and receiving responses from one or more other devices, known as slaves. The slaves are responsible for carrying out the requests of the master and providing the requested data.

Here is an example of how a master-slave configuration might work in a SCADA system:

The master device, such as a computer running SCADA software, sends a request for data to a slave device, such as a programmable logic controller (PLC) or a remote terminal unit (RTU).

The slave device receives the request and processes it, gathering the requested data from its inputs and outputs.

The slave device sends a response back to the master, providing the requested data.

The master device receives the response and processes the data, possibly displaying it to the operator or using it to control other devices in the system.

This type of configuration is commonly used in SCADA systems to allow a central control device to communicate with and control remote devices, such as sensors, actuators, and other field devices. It is important to use these systems responsibly and not attempt to access or manipulate systems that you do not have permission to access.


Programmable Logic Controllers (PLCs) are specialized computers that are used to control industrial processes, such as manufacturing and assembly lines. They are designed to be rugged and reliable, and are used in a variety of industries, including manufacturing, oil and gas, and water and sewage treatment.

PLCs are programmed using a specialized programming language, such as ladder logic or structured text, which allows them to receive input from sensors, make decisions based on that input, and control outputs, such as motors and actuators.

PLCs can be connected to a variety of field devices, such as sensors and actuators, and can communicate with other devices, such as computers and SCADA systems, using protocols such as Modbus and EtherNet/IP.

PLCs are a key component of many industrial control systems, and are widely used due to their reliability, flexibility, and ease of programming. It is important to use these devices responsibly and not attempt to access or manipulate systems that you do not have permission to access.


Programmable Logic Controllers (PLCs) can use a variety of ports to communicate with other devices, such as computers and other PLCs. Some common ports that are used with PLCs include:

Ethernet ports - These are used to connect PLCs to Ethernet networks and allow them to communicate with other devices using protocols such as Modbus TCP/IP and EtherNet/IP.

Serial ports - These are used to connect PLCs to other devices using serial communication protocols, such as Modbus RTU and DF1.

USB ports - These are used to connect PLCs to computers and other devices using the Universal Serial Bus (USB) standard.

I/O ports - These are used to connect PLCs to field devices, such as sensors and actuators, and allow them to receive input and control output.

It is important to note that the specific ports available on a PLC can vary depending on the model and manufacturer. It is also important to use these ports responsibly and not attempt to access or manipulate systems that you do not have permission to access.

TCP/IP (Transmission Control Protocol/Internet Protocol) is a standard communication protocol that is used to transmit data over networks, including the internet. It is the primary protocol used to connect devices on the internet and allows them to communicate with each other.

In the context of Programmable Logic Controllers (PLCs), TCP/IP can be used to communicate with other devices over Ethernet networks using a variety of protocols, such as Modbus TCP/IP and EtherNet/IP. These protocols use specific port numbers to identify the type of communication being transmitted and to route the data to the appropriate application or device.

Some common port numbers used with TCP/IP and PLCs include:

Modbus TCP/IP - Port 502
EtherNet/IP - Port 44818

It is important to note that these are just a few examples, and the specific port numbers used can vary depending on the protocol and the specific implementation. It is also important to use these ports responsibly and not attempt to access or manipulate systems that you do not have permission to access.

The port number 102 is not a commonly used port number for any specific application or protocol. It is not a reserved port number, which means that it can be used by any application for any purpose.

In the context of industrial control systems, port 102 is sometimes used for communication with Programmable Logic Controllers (PLCs) using the S7 Communication protocol, which is a proprietary protocol used by Siemens PLCs. However, the specific use of port 102 can vary depending on the system and the devices being used.

It is important to note that the use of port numbers is just one aspect of network communication, and the specific protocols and applications being used can also play a role in determining how data is transmitted and received. It is also important to use these ports responsibly and not attempt to access or manipulate systems that you do not have permission to access.


Penetration testing, or pentesting, is the practice of simulating a cyber attack on a computer system, network, or device to test its defenses and identify vulnerabilities. Pentesting is often used to evaluate the security of industrial control systems (ICS), including Programmable Logic Controllers (PLCs), to identify and address potential vulnerabilities that could be exploited by an attacker.

There are several steps that can be followed when pentesting a PLC:

Identify the target PLC and gather information about it, including the model, manufacturer, and any available documentation.

Determine the network architecture and communications protocols being used by the PLC.

Conduct reconnaissance and gather information about the PLC and its environment, including its IP address, operating system, and any open ports.

Identify potential vulnerabilities in the PLC and its network environment.

Attempt to exploit identified vulnerabilities to gain access to the PLC.

Analyze the results of the pentest and identify any vulnerabilities that were not discovered or exploited.

Document the findings and recommend remediation steps to address any identified vulnerabilities.

It is important to note that pentesting should only be conducted with the permission of the owner of the PLC and in accordance with all applicable laws and regulations. Pentesting without proper authorization could be considered a form of cyber espionage and could result in legal consequences.

PLCScan for Info, SiemensScan for exploiting.
PLCScan for Info, modbus write %MW0 {65535} for exploiting






